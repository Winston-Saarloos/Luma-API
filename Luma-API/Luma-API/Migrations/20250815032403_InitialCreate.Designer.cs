// <auto-generated />
using System;
using System.Text.Json;
using Luma_API.Domain.Entities;
using Luma_API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Luma_API.Migrations
{
    [DbContext(typeof(LumaDbContext))]
    [Migration("20250815032403_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "breakpoint", new[] { "lg", "md", "sm", "xs" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Luma_API.Domain.Entities.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("dashboards", (string)null);
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.DashboardLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Breakpoint>("Bp")
                        .HasColumnType("breakpoint");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid");

                    b.Property<int>("GridCols")
                        .HasColumnType("integer");

                    b.Property<int>("RowHeight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId", "Bp")
                        .IsUnique();

                    b.ToTable("dashboard_layouts", (string)null);
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.Widget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("TypeKey")
                        .IsUnique();

                    b.ToTable("widgets", (string)null);
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.WidgetConfig", b =>
                {
                    b.Property<Guid>("WidgetInstanceId")
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("Config")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("WidgetInstanceId");

                    b.ToTable("widget_configs", (string)null);
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.WidgetInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid");

                    b.Property<int>("H")
                        .HasColumnType("integer");

                    b.Property<int>("W")
                        .HasColumnType("integer");

                    b.Property<Guid>("WidgetId")
                        .HasColumnType("uuid");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.HasIndex("WidgetId");

                    b.ToTable("widget_instances", (string)null);
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.Dashboard", b =>
                {
                    b.HasOne("Luma_API.Domain.Entities.User", "User")
                        .WithMany("Dashboards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.DashboardLayout", b =>
                {
                    b.HasOne("Luma_API.Domain.Entities.Dashboard", "Dashboard")
                        .WithMany("Layouts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.WidgetConfig", b =>
                {
                    b.HasOne("Luma_API.Domain.Entities.WidgetInstance", "WidgetInstance")
                        .WithOne("Config")
                        .HasForeignKey("Luma_API.Domain.Entities.WidgetConfig", "WidgetInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WidgetInstance");
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.WidgetInstance", b =>
                {
                    b.HasOne("Luma_API.Domain.Entities.Dashboard", "Dashboard")
                        .WithMany("WidgetInstances")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Luma_API.Domain.Entities.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dashboard");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.Dashboard", b =>
                {
                    b.Navigation("Layouts");

                    b.Navigation("WidgetInstances");
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.User", b =>
                {
                    b.Navigation("Dashboards");
                });

            modelBuilder.Entity("Luma_API.Domain.Entities.WidgetInstance", b =>
                {
                    b.Navigation("Config");
                });
#pragma warning restore 612, 618
        }
    }
}
