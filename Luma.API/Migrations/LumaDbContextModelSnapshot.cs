// <auto-generated />
using System;
using System.Text.Json;
using Luma.API.Domain.Entities;
using Luma.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Luma.API.Migrations
{
    [DbContext(typeof(LumaDbContext))]
    partial class LumaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "breakpoint", new[] { "lg", "md", "sm", "xs" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Luma.API.Domain.Entities.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_dashboards");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_dashboards_user_id");

                    b.ToTable("dashboards", (string)null);
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.DashboardLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Breakpoint>("Bp")
                        .HasColumnType("breakpoint")
                        .HasColumnName("bp");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<int>("GridCols")
                        .HasColumnType("integer")
                        .HasColumnName("grid_cols");

                    b.Property<int>("RowHeight")
                        .HasColumnType("integer")
                        .HasColumnName("row_height");

                    b.HasKey("Id")
                        .HasName("pk_dashboard_layouts");

                    b.HasIndex("DashboardId", "Bp")
                        .IsUnique()
                        .HasDatabaseName("ix_dashboard_layouts_dashboard_id_bp");

                    b.ToTable("dashboard_layouts", (string)null);
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastLoggedInAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logged_in_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.Widget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("display_name");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("type_key");

                    b.HasKey("Id")
                        .HasName("pk_widgets");

                    b.HasIndex("TypeKey")
                        .IsUnique()
                        .HasDatabaseName("ix_widgets_type_key");

                    b.ToTable("widgets", (string)null);
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.WidgetConfig", b =>
                {
                    b.Property<Guid>("WidgetInstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("widget_instance_id");

                    b.Property<JsonDocument>("Config")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("config");

                    b.HasKey("WidgetInstanceId")
                        .HasName("pk_widget_configs");

                    b.ToTable("widget_configs", (string)null);
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.WidgetInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("dashboard_id");

                    b.Property<int>("H")
                        .HasColumnType("integer")
                        .HasColumnName("h");

                    b.Property<int>("W")
                        .HasColumnType("integer")
                        .HasColumnName("w");

                    b.Property<Guid>("WidgetId")
                        .HasColumnType("uuid")
                        .HasColumnName("widget_id");

                    b.Property<int>("X")
                        .HasColumnType("integer")
                        .HasColumnName("x");

                    b.Property<int>("Y")
                        .HasColumnType("integer")
                        .HasColumnName("y");

                    b.HasKey("Id")
                        .HasName("pk_widget_instances");

                    b.HasIndex("DashboardId")
                        .HasDatabaseName("ix_widget_instances_dashboard_id");

                    b.HasIndex("WidgetId")
                        .HasDatabaseName("ix_widget_instances_widget_id");

                    b.ToTable("widget_instances", (string)null);
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.Dashboard", b =>
                {
                    b.HasOne("Luma.API.Domain.Entities.User", "User")
                        .WithMany("Dashboards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dashboards_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.DashboardLayout", b =>
                {
                    b.HasOne("Luma.API.Domain.Entities.Dashboard", "Dashboard")
                        .WithMany("Layouts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dashboard_layouts_dashboards_dashboard_id");

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.WidgetConfig", b =>
                {
                    b.HasOne("Luma.API.Domain.Entities.WidgetInstance", "WidgetInstance")
                        .WithOne("Config")
                        .HasForeignKey("Luma.API.Domain.Entities.WidgetConfig", "WidgetInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_widget_configs_widget_instances_widget_instance_id");

                    b.Navigation("WidgetInstance");
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.WidgetInstance", b =>
                {
                    b.HasOne("Luma.API.Domain.Entities.Dashboard", "Dashboard")
                        .WithMany("WidgetInstances")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_widget_instances_dashboards_dashboard_id");

                    b.HasOne("Luma.API.Domain.Entities.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_widget_instances_widgets_widget_id");

                    b.Navigation("Dashboard");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.Dashboard", b =>
                {
                    b.Navigation("Layouts");

                    b.Navigation("WidgetInstances");
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.User", b =>
                {
                    b.Navigation("Dashboards");
                });

            modelBuilder.Entity("Luma.API.Domain.Entities.WidgetInstance", b =>
                {
                    b.Navigation("Config");
                });
#pragma warning restore 612, 618
        }
    }
}
